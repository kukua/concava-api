{
    "docs": [
        {
            "location": "/",
            "text": "ConCaVa API\n\n\nAPI for modifying \nConCaVa\n metadata.",
            "title": "Home"
        },
        {
            "location": "/#concava-api",
            "text": "API for modifying  ConCaVa  metadata.",
            "title": "ConCaVa API"
        },
        {
            "location": "/getting-started/",
            "text": "Getting started\n\n\nThis chapter helps you to get started with the ConCaVa API.\n\n\nStep 1: Determine data format\n\n\nSay you have a device with two sensors:\n\n\n\n\nTemperature: in degrees Celcius, with one decimal point and between -100.0 and 100.0. E.g. \n234\n, which will later be divided by 10 to add the decimal point.\n\n\nDistance: in centimeters, between 0 and 80. E.g. \n15\n.\n\n\n\n\nSince some devices do not always have an internet connection, we also add the UNIX timestamp of the moment the measurement occured.\n\n\nThis can be translated into the following format:\n\n\n\n\ntimestamp =\n uint32le\n\n\ntemp =\n int16le\n\n\ndistance =\n uint8\n (no endianess for a single byte)\n\n\n\n\nFor example: \n20e03e57 ea00 0f\n (1463738400, 234, 15)\n\n\nStep 2: Register user\n\n\ncurl -v -XPOST http://\nhost\n/v1/users -H 'Content-Type: application/json' \\\n    -d '{\nname\n: \nJohn Doe\n, \nemail\n: \njohn@example.com\n, \npassword\n: \nsecurepassword\n, \npassword_confirmation\n: \nsecurepassword\n}'\n# {\nid\n: 123, ..., \ntoken\n: \nauth token\n}\n\n\n\n\nLater on, you can again retrieve the token with:\n\n\ncurl -v http://\nhost\n/v1/users/login -H 'Authorization: Basic \nbase64 encoded \nemail\n:\npassword\n'\n# {\nid\n: 110, ..., \ntoken\n: \nauth token\n}\n\n\n\n\nStep 3: Create template\n\n\ncurl -v -XPOST http://\nhost\n/v1/templates -H 'Content-Type: application/json' -H 'Authorization: Token \nauth token\n' \\\n    -d '{\nname\n: \nMy template\n}'\n# {\nid\n: 120, ...}\n\n\n\n\nStep 4: Add attributes to template\n\n\ncurl -v -XPOST http://\nhost\n/v1/attributes -H 'Content-Type: application/json' -H 'Authorization: Token \nauth token\n' \\\n    -d '{\ntemplate_id\n: 120, \nname\n: \ntimestamp\n, \norder\n: 0, \nconverter\n:\nuint32le\n}'\n# {\nid\n: 130, ...}\ncurl -v -XPOST http://\nhost\n/v1/attributes -H 'Content-Type: application/json' -H 'Authorization: Token \nauth token\n' \\\n    -d '{\ntemplate_id\n: 120, \nname\n: \ntemp\n, \norder\n: 1, \nconverter\n:\nint16le\n, \ncalibrator\n: \nreturn value / 10\n, \nvalidators\n: \nmin=-100 max=100\n}'\n# {\nid\n: 131, ...}\ncurl -v -XPOST http://\nhost\n/v1/attributes -H 'Content-Type: application/json' -H 'Authorization: Token \nauth token\n' \\\n    -d '{\ntemplate_id\n: 120, \nname\n: \ndistance\n, \norder\n: 2, \nconverter\n:\nuint8\n, \nvalidators\n: \nmin=0 max=80\n}'\n# {\nid\n: 132, ...}\n\n\n\n\nStep 5: Create device\n\n\ncurl -v -XPOST http://\nhost\n/v1/devices -H 'Content-Type: application/json' -H 'Authorization: Token \nauth token\n' \\\n    -d '{\ntemplate_id\n: 120, \nname\n: \nMy device\n, \nudid\n: \ndevice id\n}'\n# {\nid\n: 140, ...}\n\n\n\n\nStep 6: Test posting data to ConCaVa\n\n\necho '20e03e57ea000f' | xxd -r -p | \\\n    curl -i -XPUT 'http://\nhost\n:3000/v1/sensorData/\ndevice id\n' \\\n    -H 'Authorization: Token \nauth token\n' \\\n    -H 'Content-Type: application/octet-stream' --data-binary @-\n# Response: 200 OK",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#getting-started",
            "text": "This chapter helps you to get started with the ConCaVa API.",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#step-1-determine-data-format",
            "text": "Say you have a device with two sensors:   Temperature: in degrees Celcius, with one decimal point and between -100.0 and 100.0. E.g.  234 , which will later be divided by 10 to add the decimal point.  Distance: in centimeters, between 0 and 80. E.g.  15 .   Since some devices do not always have an internet connection, we also add the UNIX timestamp of the moment the measurement occured.  This can be translated into the following format:   timestamp =  uint32le  temp =  int16le  distance =  uint8  (no endianess for a single byte)   For example:  20e03e57 ea00 0f  (1463738400, 234, 15)",
            "title": "Step 1: Determine data format"
        },
        {
            "location": "/getting-started/#step-2-register-user",
            "text": "curl -v -XPOST http:// host /v1/users -H 'Content-Type: application/json' \\\n    -d '{ name :  John Doe ,  email :  john@example.com ,  password :  securepassword ,  password_confirmation :  securepassword }'\n# { id : 123, ...,  token :  auth token }  Later on, you can again retrieve the token with:  curl -v http:// host /v1/users/login -H 'Authorization: Basic  base64 encoded  email : password '\n# { id : 110, ...,  token :  auth token }",
            "title": "Step 2: Register user"
        },
        {
            "location": "/getting-started/#step-3-create-template",
            "text": "curl -v -XPOST http:// host /v1/templates -H 'Content-Type: application/json' -H 'Authorization: Token  auth token ' \\\n    -d '{ name :  My template }'\n# { id : 120, ...}",
            "title": "Step 3: Create template"
        },
        {
            "location": "/getting-started/#step-4-add-attributes-to-template",
            "text": "curl -v -XPOST http:// host /v1/attributes -H 'Content-Type: application/json' -H 'Authorization: Token  auth token ' \\\n    -d '{ template_id : 120,  name :  timestamp ,  order : 0,  converter : uint32le }'\n# { id : 130, ...}\ncurl -v -XPOST http:// host /v1/attributes -H 'Content-Type: application/json' -H 'Authorization: Token  auth token ' \\\n    -d '{ template_id : 120,  name :  temp ,  order : 1,  converter : int16le ,  calibrator :  return value / 10 ,  validators :  min=-100 max=100 }'\n# { id : 131, ...}\ncurl -v -XPOST http:// host /v1/attributes -H 'Content-Type: application/json' -H 'Authorization: Token  auth token ' \\\n    -d '{ template_id : 120,  name :  distance ,  order : 2,  converter : uint8 ,  validators :  min=0 max=80 }'\n# { id : 132, ...}",
            "title": "Step 4: Add attributes to template"
        },
        {
            "location": "/getting-started/#step-5-create-device",
            "text": "curl -v -XPOST http:// host /v1/devices -H 'Content-Type: application/json' -H 'Authorization: Token  auth token ' \\\n    -d '{ template_id : 120,  name :  My device ,  udid :  device id }'\n# { id : 140, ...}",
            "title": "Step 5: Create device"
        },
        {
            "location": "/getting-started/#step-6-test-posting-data-to-concava",
            "text": "echo '20e03e57ea000f' | xxd -r -p | \\\n    curl -i -XPUT 'http:// host :3000/v1/sensorData/ device id ' \\\n    -H 'Authorization: Token  auth token ' \\\n    -H 'Content-Type: application/octet-stream' --data-binary @-\n# Response: 200 OK",
            "title": "Step 6: Test posting data to ConCaVa"
        }
    ]
}